
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: Aug  4 2024 07:09:58

// Verification Directory fv/asynchronous_fifo 

module bmux(ctl, in_0, in_1, z);
  input ctl;
  input [10:0] in_0, in_1;
  output [10:0] z;
  wire ctl;
  wire [10:0] in_0, in_1;
  wire [10:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module synchronizer_WIDTH10(clk, rst_n, d_in, d_out);
  input clk, rst_n;
  input [10:0] d_in;
  output [10:0] d_out;
  wire clk, rst_n;
  wire [10:0] d_in;
  wire [10:0] d_out;
  wire [10:0] q1;
  wire UNCONNECTED, UNCONNECTED0, UNCONNECTED1, UNCONNECTED2,
       UNCONNECTED3, UNCONNECTED4, UNCONNECTED5, UNCONNECTED6;
  wire UNCONNECTED7, UNCONNECTED8, UNCONNECTED9, UNCONNECTED10,
       UNCONNECTED11, UNCONNECTED12, UNCONNECTED13, UNCONNECTED14;
  wire UNCONNECTED15, UNCONNECTED16, UNCONNECTED17, UNCONNECTED18,
       UNCONNECTED19, UNCONNECTED20, n_23;
  bmux mux_q1_4_8(.ctl (n_23), .in_0 (d_in), .in_1 (11'b00000000000),
       .z ({UNCONNECTED9, UNCONNECTED8, UNCONNECTED7, UNCONNECTED6,
       UNCONNECTED5, UNCONNECTED4, UNCONNECTED3, UNCONNECTED2,
       UNCONNECTED1, UNCONNECTED0, UNCONNECTED}));
  bmux mux_d_out_4_8(.ctl (n_23), .in_0 (q1), .in_1 (11'b00000000000),
       .z ({UNCONNECTED20, UNCONNECTED19, UNCONNECTED18, UNCONNECTED17,
       UNCONNECTED16, UNCONNECTED15, UNCONNECTED14, UNCONNECTED13,
       UNCONNECTED12, UNCONNECTED11, UNCONNECTED10}));
  not g1 (n_23, rst_n);
  CDN_flop \d_out_reg[0] (.clk (clk), .d (q1[0]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[0]));
  CDN_flop \d_out_reg[1] (.clk (clk), .d (q1[1]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[1]));
  CDN_flop \d_out_reg[2] (.clk (clk), .d (q1[2]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[2]));
  CDN_flop \d_out_reg[3] (.clk (clk), .d (q1[3]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[3]));
  CDN_flop \d_out_reg[4] (.clk (clk), .d (q1[4]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[4]));
  CDN_flop \d_out_reg[5] (.clk (clk), .d (q1[5]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[5]));
  CDN_flop \d_out_reg[6] (.clk (clk), .d (q1[6]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[6]));
  CDN_flop \d_out_reg[7] (.clk (clk), .d (q1[7]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[7]));
  CDN_flop \d_out_reg[8] (.clk (clk), .d (q1[8]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[8]));
  CDN_flop \d_out_reg[9] (.clk (clk), .d (q1[9]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[9]));
  CDN_flop \d_out_reg[10] (.clk (clk), .d (q1[10]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (d_out[10]));
  CDN_flop \q1_reg[0] (.clk (clk), .d (d_in[0]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[0]));
  CDN_flop \q1_reg[1] (.clk (clk), .d (d_in[1]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[1]));
  CDN_flop \q1_reg[2] (.clk (clk), .d (d_in[2]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[2]));
  CDN_flop \q1_reg[3] (.clk (clk), .d (d_in[3]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[3]));
  CDN_flop \q1_reg[4] (.clk (clk), .d (d_in[4]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[4]));
  CDN_flop \q1_reg[5] (.clk (clk), .d (d_in[5]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[5]));
  CDN_flop \q1_reg[6] (.clk (clk), .d (d_in[6]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[6]));
  CDN_flop \q1_reg[7] (.clk (clk), .d (d_in[7]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[7]));
  CDN_flop \q1_reg[8] (.clk (clk), .d (d_in[8]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[8]));
  CDN_flop \q1_reg[9] (.clk (clk), .d (d_in[9]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[9]));
  CDN_flop \q1_reg[10] (.clk (clk), .d (d_in[10]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_23), .srd (1'b0), .q (q1[10]));
endmodule

module pg_block(a, b, p, g);
  input a, b;
  output p, g;
  wire a, b;
  wire p, g;
  and g1 (g, a, b);
  xor g2 (p, a, b);
endmodule

module fco_block(pi, pi_pre, gi, gi_pre, p_out, g_out);
  input pi, pi_pre, gi, gi_pre;
  output p_out, g_out;
  wire pi, pi_pre, gi, gi_pre;
  wire p_out, g_out;
  wire n_4;
  and g1 (p_out, pi, pi_pre);
  and g2 (n_4, pi, gi_pre);
  or g3 (g_out, n_4, gi);
endmodule

module sum_block(pi, ci_pre, sum);
  input pi, ci_pre;
  output sum;
  wire pi, ci_pre;
  wire sum;
  xor g1 (sum, pi, ci_pre);
endmodule

module ksa_adder_data_size10(a, b, cin, sum, cout);
  input [9:0] a, b;
  input cin;
  output [9:0] sum;
  output cout;
  wire [9:0] a, b;
  wire cin;
  wire [9:0] sum;
  wire cout;
  wire [9:0] p_pre;
  wire [9:0] g_pre;
  wire UNCONNECTED21, UNCONNECTED22, UNCONNECTED23, UNCONNECTED24,
       UNCONNECTED25, UNCONNECTED26, UNCONNECTED27, UNCONNECTED28;
  wire g_c, g_c_2, g_c_23, g_c_24, g_c_26, g_c_28, g_c_30, g_c_32;
  wire g_c_34, g_c_36, g_c_38, g_c_39, g_c_40, g_c_41, g_c_42, g_c_43;
  wire p_c, p_c_21, p_c_22, p_c_25, p_c_27, p_c_29, p_c_31, p_c_33;
  wire p_c_35;
  pg_block \pcc[0].pre_pros (a[0], b[0], p_pre[0], g_pre[0]);
  pg_block \pcc[1].pre_pros (a[1], b[1], p_pre[1], g_pre[1]);
  pg_block \pcc[2].pre_pros (a[2], b[2], p_pre[2], g_pre[2]);
  pg_block \pcc[3].pre_pros (a[3], b[3], p_pre[3], g_pre[3]);
  pg_block \pcc[4].pre_pros (a[4], b[4], p_pre[4], g_pre[4]);
  pg_block \pcc[5].pre_pros (a[5], b[5], p_pre[5], g_pre[5]);
  pg_block \pcc[6].pre_pros (a[6], b[6], p_pre[6], g_pre[6]);
  pg_block \pcc[7].pre_pros (a[7], b[7], p_pre[7], g_pre[7]);
  pg_block \pcc[8].pre_pros (a[8], b[8], p_pre[8], g_pre[8]);
  pg_block \pcc[9].pre_pros (a[9], b[9], p_pre[9], g_pre[9]);
  fco_block \fco_1[1].gen_carry (p_pre[1], p_pre[0], g_pre[1],
       g_pre[0], p_c_22, g_c_24);
  fco_block \fco_1[2].gen_carry (p_pre[2], p_pre[1], g_pre[2],
       g_pre[1], p_c, g_c);
  fco_block \fco_1[3].gen_carry (p_pre[3], p_pre[2], g_pre[3],
       g_pre[2], p_c_21, g_c_23);
  fco_block \fco_1[4].gen_carry (p_pre[4], p_pre[3], g_pre[4],
       g_pre[3], p_c_25, g_c_26);
  fco_block \fco_1[5].gen_carry (p_pre[5], p_pre[4], g_pre[5],
       g_pre[4], p_c_27, g_c_28);
  fco_block \fco_1[6].gen_carry (p_pre[6], p_pre[5], g_pre[6],
       g_pre[5], p_c_29, g_c_30);
  fco_block \fco_1[7].gen_carry (p_pre[7], p_pre[6], g_pre[7],
       g_pre[6], p_c_31, g_c_32);
  fco_block \fco_1[8].gen_carry (p_pre[8], p_pre[7], g_pre[8],
       g_pre[7], p_c_33, g_c_34);
  fco_block \fco_1[9].gen_carry (p_pre[9], p_pre[8], g_pre[9],
       g_pre[8], p_c_35, g_c_36);
  fco_block \fco_2[2].gen_carry_2 (p_c, p_pre[0], g_c, g_pre[0],
       UNCONNECTED21, g_c_2);
  fco_block \fco_2[3].gen_carry_2 (p_c_21, p_c_22, g_c_23, g_c_24,
       UNCONNECTED22, g_c_38);
  fco_block \fco_2[4].gen_carry_2 (p_c_25, p_c, g_c_26, g_c,
       UNCONNECTED23, g_c_39);
  fco_block \fco_2[5].gen_carry_2 (p_c_27, p_c_21, g_c_28, g_c_23,
       UNCONNECTED24, g_c_40);
  fco_block \fco_2[6].gen_carry_2 (p_c_29, p_c_25, g_c_30, g_c_26,
       UNCONNECTED25, g_c_41);
  fco_block \fco_2[7].gen_carry_2 (p_c_31, p_c_27, g_c_32, g_c_28,
       UNCONNECTED26, g_c_42);
  fco_block \fco_2[8].gen_carry_2 (p_c_33, p_c_29, g_c_34, g_c_30,
       UNCONNECTED27, g_c_43);
  fco_block \fco_2[9].gen_carry_2 (p_c_35, p_c_31, g_c_36, g_c_32,
       UNCONNECTED28, cout);
  sum_block sum_0(p_pre[0], cin, sum[0]);
  sum_block \sum_gen[1].sum (p_pre[1], g_pre[0], sum[1]);
  sum_block \sum_gen[2].sum (p_pre[2], g_c_24, sum[2]);
  sum_block \sum_gen[3].sum (p_pre[3], g_c_2, sum[3]);
  sum_block \sum_gen[4].sum (p_pre[4], g_c_38, sum[4]);
  sum_block \sum_gen[5].sum (p_pre[5], g_c_39, sum[5]);
  sum_block \sum_gen[6].sum (p_pre[6], g_c_40, sum[6]);
  sum_block \sum_gen[7].sum (p_pre[7], g_c_41, sum[7]);
  sum_block \sum_gen[8].sum (p_pre[8], g_c_42, sum[8]);
  sum_block \sum_gen[9].sum (p_pre[9], g_c_43, sum[9]);
endmodule

module equal_unsigned(A, B, Z);
  input [10:0] A, B;
  output Z;
  wire [10:0] A, B;
  wire Z;
  wire n_24, n_25, n_26, n_27, n_28, n_29, n_30, n_31;
  wire n_32, n_33, n_34, n_35, n_36, n_37;
  xnor g1 (n_24, A[0], B[0]);
  xnor g2 (n_25, A[1], B[1]);
  xnor g3 (n_26, A[2], B[2]);
  xnor g4 (n_27, A[3], B[3]);
  xnor g5 (n_28, A[4], B[4]);
  xnor g6 (n_29, A[5], B[5]);
  xnor g7 (n_30, A[6], B[6]);
  xnor g8 (n_31, A[7], B[7]);
  xnor g9 (n_32, A[8], B[8]);
  xnor g10 (n_33, A[9], B[9]);
  xnor g11 (n_34, A[10], B[10]);
  nand g12 (n_35, n_24, n_25, n_26, n_27);
  nand g13 (n_36, n_28, n_29, n_30, n_31);
  nand g14 (n_37, n_32, n_33, n_34);
  nor g15 (Z, n_35, n_36, n_37);
endmodule

module bmux_2(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module wptr_handler_PTR_WIDTH10(wclk, wrst_n, w_en, g_rptr_sync,
     b_wptr, g_wptr, full);
  input wclk, wrst_n, w_en;
  input [10:0] g_rptr_sync;
  output [10:0] b_wptr, g_wptr;
  output full;
  wire wclk, wrst_n, w_en;
  wire [10:0] g_rptr_sync;
  wire [10:0] b_wptr, g_wptr;
  wire full;
  wire [10:0] b_wptr_next;
  wire [10:0] g_wptr_next;
  wire UNCONNECTED29, UNCONNECTED30, UNCONNECTED31, UNCONNECTED32,
       UNCONNECTED33, UNCONNECTED34, UNCONNECTED35, UNCONNECTED36;
  wire UNCONNECTED37, UNCONNECTED38, UNCONNECTED39, UNCONNECTED40,
       UNCONNECTED41, UNCONNECTED42, UNCONNECTED43, UNCONNECTED44;
  wire UNCONNECTED45, UNCONNECTED46, UNCONNECTED47, UNCONNECTED48,
       UNCONNECTED49, UNCONNECTED50, UNCONNECTED51, UNCONNECTED52;
  wire UNCONNECTED53, n_25, n_36, n_39, n_66, n_67, wfull;
  ksa_adder_data_size10 adder(.a (b_wptr[9:0]), .b ({9'b000000000,
       n_36}), .cin (UNCONNECTED29), .sum (b_wptr_next[9:0]), .cout
       (UNCONNECTED30));
  equal_unsigned eq_34_31(.A ({b_wptr_next[10], g_wptr_next[9:0]}), .B
       ({n_67, n_66, g_rptr_sync[8:0]}), .Z (wfull));
  bmux_2 mux_full_30_8(.ctl (n_25), .in_0 (wfull), .in_1 (1'b0), .z
       (UNCONNECTED31));
  bmux mux_g_wptr_19_8(.ctl (n_25), .in_0 ({b_wptr_next[10],
       g_wptr_next[9:0]}), .in_1 (11'b00000000000), .z ({UNCONNECTED42,
       UNCONNECTED41, UNCONNECTED40, UNCONNECTED39, UNCONNECTED38,
       UNCONNECTED37, UNCONNECTED36, UNCONNECTED35, UNCONNECTED34,
       UNCONNECTED33, UNCONNECTED32}));
  bmux mux_b_wptr_19_8(.ctl (n_25), .in_0 (b_wptr_next), .in_1
       (11'b00000000000), .z ({UNCONNECTED53, UNCONNECTED52,
       UNCONNECTED51, UNCONNECTED50, UNCONNECTED49, UNCONNECTED48,
       UNCONNECTED47, UNCONNECTED46, UNCONNECTED45, UNCONNECTED44,
       UNCONNECTED43}));
  and g2 (n_36, w_en, n_39);
  not g1 (n_39, full);
  xor g20 (g_wptr_next[0], b_wptr_next[1], b_wptr_next[0]);
  xor g21 (g_wptr_next[1], b_wptr_next[2], b_wptr_next[1]);
  xor g3 (g_wptr_next[2], b_wptr_next[3], b_wptr_next[2]);
  xor g22 (g_wptr_next[3], b_wptr_next[4], b_wptr_next[3]);
  xor g23 (g_wptr_next[4], b_wptr_next[5], b_wptr_next[4]);
  xor g24 (g_wptr_next[5], b_wptr_next[6], b_wptr_next[5]);
  xor g25 (g_wptr_next[6], b_wptr_next[7], b_wptr_next[6]);
  xor g26 (g_wptr_next[7], b_wptr_next[8], b_wptr_next[7]);
  xor g9 (g_wptr_next[8], b_wptr_next[9], b_wptr_next[8]);
  xor g10 (g_wptr_next[9], b_wptr_next[10], b_wptr_next[9]);
  not g27 (n_25, wrst_n);
  CDN_flop \b_wptr_reg[0] (.clk (wclk), .d (b_wptr_next[0]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[0]));
  CDN_flop \b_wptr_reg[1] (.clk (wclk), .d (b_wptr_next[1]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[1]));
  CDN_flop \b_wptr_reg[2] (.clk (wclk), .d (b_wptr_next[2]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[2]));
  CDN_flop \b_wptr_reg[3] (.clk (wclk), .d (b_wptr_next[3]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[3]));
  CDN_flop \b_wptr_reg[4] (.clk (wclk), .d (b_wptr_next[4]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[4]));
  CDN_flop \b_wptr_reg[5] (.clk (wclk), .d (b_wptr_next[5]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[5]));
  CDN_flop \b_wptr_reg[6] (.clk (wclk), .d (b_wptr_next[6]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[6]));
  CDN_flop \b_wptr_reg[7] (.clk (wclk), .d (b_wptr_next[7]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[7]));
  CDN_flop \b_wptr_reg[8] (.clk (wclk), .d (b_wptr_next[8]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[8]));
  CDN_flop \b_wptr_reg[9] (.clk (wclk), .d (b_wptr_next[9]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[9]));
  CDN_flop \b_wptr_reg[10] (.clk (wclk), .d (b_wptr_next[10]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_wptr[10]));
  CDN_flop \g_wptr_reg[0] (.clk (wclk), .d (g_wptr_next[0]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[0]));
  CDN_flop \g_wptr_reg[1] (.clk (wclk), .d (g_wptr_next[1]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[1]));
  CDN_flop \g_wptr_reg[2] (.clk (wclk), .d (g_wptr_next[2]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[2]));
  CDN_flop \g_wptr_reg[3] (.clk (wclk), .d (g_wptr_next[3]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[3]));
  CDN_flop \g_wptr_reg[4] (.clk (wclk), .d (g_wptr_next[4]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[4]));
  CDN_flop \g_wptr_reg[5] (.clk (wclk), .d (g_wptr_next[5]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[5]));
  CDN_flop \g_wptr_reg[6] (.clk (wclk), .d (g_wptr_next[6]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[6]));
  CDN_flop \g_wptr_reg[7] (.clk (wclk), .d (g_wptr_next[7]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[7]));
  CDN_flop \g_wptr_reg[8] (.clk (wclk), .d (g_wptr_next[8]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[8]));
  CDN_flop \g_wptr_reg[9] (.clk (wclk), .d (g_wptr_next[9]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[9]));
  CDN_flop \g_wptr_reg[10] (.clk (wclk), .d (b_wptr_next[10]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_wptr[10]));
  CDN_flop full_reg(.clk (wclk), .d (wfull), .sena (1'b1), .aclr
       (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (full));
  not g28 (n_67, g_rptr_sync[10]);
  not g29 (n_66, g_rptr_sync[9]);
endmodule

module rptr_handler_PTR_WIDTH10(rclk, rrst_n, r_en, g_wptr_sync,
     b_rptr, g_rptr, empty);
  input rclk, rrst_n, r_en;
  input [10:0] g_wptr_sync;
  output [10:0] b_rptr, g_rptr;
  output empty;
  wire rclk, rrst_n, r_en;
  wire [10:0] g_wptr_sync;
  wire [10:0] b_rptr, g_rptr;
  wire empty;
  wire [10:0] b_rptr_next;
  wire [10:0] g_rptr_next;
  wire UNCONNECTED54, UNCONNECTED55, UNCONNECTED56, UNCONNECTED57,
       UNCONNECTED58, UNCONNECTED59, UNCONNECTED60, UNCONNECTED61;
  wire UNCONNECTED62, UNCONNECTED63, UNCONNECTED64, UNCONNECTED65,
       UNCONNECTED66, UNCONNECTED67, UNCONNECTED68, UNCONNECTED69;
  wire UNCONNECTED70, UNCONNECTED71, UNCONNECTED72, UNCONNECTED73,
       UNCONNECTED74, UNCONNECTED75, UNCONNECTED76, UNCONNECTED77;
  wire UNCONNECTED78, n_25, n_36, n_39, rempty;
  ksa_adder_data_size10 adder(.a (b_rptr[9:0]), .b ({9'b000000000,
       n_36}), .cin (UNCONNECTED54), .sum (b_rptr_next[9:0]), .cout
       (UNCONNECTED55));
  equal_unsigned eq_19_32(.A (g_wptr_sync), .B ({b_rptr_next[10],
       g_rptr_next[9:0]}), .Z (rempty));
  bmux_2 mux_empty_34_8(.ctl (n_25), .in_0 (rempty), .in_1 (1'b1), .z
       (UNCONNECTED56));
  bmux mux_g_rptr_23_8(.ctl (n_25), .in_0 ({b_rptr_next[10],
       g_rptr_next[9:0]}), .in_1 (11'b00000000000), .z ({UNCONNECTED67,
       UNCONNECTED66, UNCONNECTED65, UNCONNECTED64, UNCONNECTED63,
       UNCONNECTED62, UNCONNECTED61, UNCONNECTED60, UNCONNECTED59,
       UNCONNECTED58, UNCONNECTED57}));
  bmux mux_b_rptr_23_8(.ctl (n_25), .in_0 (b_rptr_next), .in_1
       (11'b00000000000), .z ({UNCONNECTED78, UNCONNECTED77,
       UNCONNECTED76, UNCONNECTED75, UNCONNECTED74, UNCONNECTED73,
       UNCONNECTED72, UNCONNECTED71, UNCONNECTED70, UNCONNECTED69,
       UNCONNECTED68}));
  and g2 (n_36, r_en, n_39);
  not g1 (n_39, empty);
  xor g19 (g_rptr_next[0], b_rptr_next[1], b_rptr_next[0]);
  xor g20 (g_rptr_next[1], b_rptr_next[2], b_rptr_next[1]);
  xor g3 (g_rptr_next[2], b_rptr_next[3], b_rptr_next[2]);
  xor g21 (g_rptr_next[3], b_rptr_next[4], b_rptr_next[3]);
  xor g22 (g_rptr_next[4], b_rptr_next[5], b_rptr_next[4]);
  xor g23 (g_rptr_next[5], b_rptr_next[6], b_rptr_next[5]);
  xor g24 (g_rptr_next[6], b_rptr_next[7], b_rptr_next[6]);
  xor g8 (g_rptr_next[7], b_rptr_next[8], b_rptr_next[7]);
  xor g9 (g_rptr_next[8], b_rptr_next[9], b_rptr_next[8]);
  xor g10 (g_rptr_next[9], b_rptr_next[10], b_rptr_next[9]);
  not g25 (n_25, rrst_n);
  CDN_flop \b_rptr_reg[0] (.clk (rclk), .d (b_rptr_next[0]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[0]));
  CDN_flop \b_rptr_reg[1] (.clk (rclk), .d (b_rptr_next[1]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[1]));
  CDN_flop \b_rptr_reg[2] (.clk (rclk), .d (b_rptr_next[2]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[2]));
  CDN_flop \b_rptr_reg[3] (.clk (rclk), .d (b_rptr_next[3]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[3]));
  CDN_flop \b_rptr_reg[4] (.clk (rclk), .d (b_rptr_next[4]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[4]));
  CDN_flop \b_rptr_reg[5] (.clk (rclk), .d (b_rptr_next[5]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[5]));
  CDN_flop \b_rptr_reg[6] (.clk (rclk), .d (b_rptr_next[6]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[6]));
  CDN_flop \b_rptr_reg[7] (.clk (rclk), .d (b_rptr_next[7]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[7]));
  CDN_flop \b_rptr_reg[8] (.clk (rclk), .d (b_rptr_next[8]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[8]));
  CDN_flop \b_rptr_reg[9] (.clk (rclk), .d (b_rptr_next[9]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[9]));
  CDN_flop \b_rptr_reg[10] (.clk (rclk), .d (b_rptr_next[10]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (b_rptr[10]));
  CDN_flop \g_rptr_reg[0] (.clk (rclk), .d (g_rptr_next[0]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[0]));
  CDN_flop \g_rptr_reg[1] (.clk (rclk), .d (g_rptr_next[1]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[1]));
  CDN_flop \g_rptr_reg[2] (.clk (rclk), .d (g_rptr_next[2]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[2]));
  CDN_flop \g_rptr_reg[3] (.clk (rclk), .d (g_rptr_next[3]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[3]));
  CDN_flop \g_rptr_reg[4] (.clk (rclk), .d (g_rptr_next[4]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[4]));
  CDN_flop \g_rptr_reg[5] (.clk (rclk), .d (g_rptr_next[5]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[5]));
  CDN_flop \g_rptr_reg[6] (.clk (rclk), .d (g_rptr_next[6]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[6]));
  CDN_flop \g_rptr_reg[7] (.clk (rclk), .d (g_rptr_next[7]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[7]));
  CDN_flop \g_rptr_reg[8] (.clk (rclk), .d (g_rptr_next[8]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[8]));
  CDN_flop \g_rptr_reg[9] (.clk (rclk), .d (g_rptr_next[9]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[9]));
  CDN_flop \g_rptr_reg[10] (.clk (rclk), .d (b_rptr_next[10]), .sena
       (1'b1), .aclr (n_25), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (g_rptr[10]));
  CDN_flop empty_reg(.clk (rclk), .d (rempty), .sena (1'b1), .aclr
       (1'b0), .apre (n_25), .srl (1'b0), .srd (1'b0), .q (empty));
endmodule

module fifo_mem(wclk, w_en, rclk, r_en, waddr, raddr, wdata, full,
     empty, rdata);
  input wclk, w_en, rclk, r_en, full, empty;
  input [9:0] waddr, raddr;
  input [7:0] wdata;
  output [7:0] rdata;
  wire wclk, w_en, rclk, r_en, full, empty;
  wire [9:0] waddr, raddr;
  wire [7:0] wdata;
  wire [7:0] rdata;
  wire UNCONNECTED79, UNCONNECTED80, UNCONNECTED81, UNCONNECTED82,
       UNCONNECTED83, UNCONNECTED84, UNCONNECTED85, UNCONNECTED86;
  sky130_sram_1kbyte_1rw1r_8x1024_8 RAM(.din0 (wdata), .addr0 (waddr),
       .wmask0 (w_en), .csb0 (full), .web0 (1'b0), .clk0 (wclk), .addr1
       (raddr), .csb1 (r_en), .clk1 (rclk), .dout0 ({UNCONNECTED86,
       UNCONNECTED85, UNCONNECTED84, UNCONNECTED83, UNCONNECTED82,
       UNCONNECTED81, UNCONNECTED80, UNCONNECTED79}), .dout1 (rdata));
endmodule

module asynchronous_fifo(wclk, wrst_n, rclk, rrst_n, w_en, r_en,
     data_in, data_out, full, empty);
  input wclk, wrst_n, rclk, rrst_n, w_en, r_en;
  input [7:0] data_in;
  output [7:0] data_out;
  output full, empty;
  wire wclk, wrst_n, rclk, rrst_n, w_en, r_en;
  wire [7:0] data_in;
  wire [7:0] data_out;
  wire full, empty;
  wire [10:0] g_wptr;
  wire [10:0] g_wptr_sync;
  wire [10:0] g_rptr;
  wire [10:0] g_rptr_sync;
  wire [10:0] b_wptr;
  wire [10:0] b_rptr;
  synchronizer_WIDTH10 sync_wptr(rclk, rrst_n, g_wptr, g_wptr_sync);
  synchronizer_WIDTH10 sync_rptr(wclk, wrst_n, g_rptr, g_rptr_sync);
  wptr_handler_PTR_WIDTH10 wptr_h(wclk, wrst_n, w_en, g_rptr_sync,
       b_wptr, g_wptr, full);
  rptr_handler_PTR_WIDTH10 rptr_h(rclk, rrst_n, r_en, g_wptr_sync,
       b_rptr, g_rptr, empty);
  fifo_mem fifom(wclk, w_en, rclk, r_en, b_wptr[9:0], b_rptr[9:0],
       data_in, full, empty, data_out);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
